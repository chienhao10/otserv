dnl Process this file with autoconf to produce a configure script.
AC_INIT

AC_PREREQ(2.50)
AC_CONFIG_AUX_DIR(config)

AC_CONFIG_SRCDIR([creature.h])

AM_CONFIG_HEADER(config.h)

AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(otserv, 0.2)

# check if we want debuging
AC_ARG_WITH(debug,   --with-debug      enable debuging,DEBUG=-DDEBUG)
AC_SUBST(DEBUG)

AM_CONDITIONAL(USE_SQL, false)
AM_CONDITIONAL(USE_MYSQL, false)
AM_CONDITIONAL(USE_SQLITE, false)

#check if we want mysql
AC_ARG_ENABLE(mysql, [  --enable-mysql          enable MySQL support], [
	AM_CONDITIONAL(USE_SQL, true)
    AM_CONDITIONAL(USE_MYSQL, true)
    MYSQL_FLAGS=-D__USE_MYSQL__
    AC_SUBST(MYSQL_FLAGS)
])

#check if we want sqlite
AC_ARG_ENABLE(sqlite, [  --enable-sqlite          enable SQLite support], [
	AM_CONDITIONAL(USE_SQL, true)
    AM_CONDITIONAL(USE_SQLITE, true)
    SQLITE_FLAGS=-D__USE_SQLITE__
    AC_SUBST(SQLITE_FLAGS)
])

#check if we want the profiler
AC_ARG_ENABLE(profiler, [  --enable-profiler       enable profiler support], [PROFILER_FLAGS=-pg])
AC_SUBST(PROFILER_FLAGS)

#check if we want to use the old naming for boost libraries
AC_ARG_ENABLE(boost-old-naming, [  --enable-boost-old-naming   enable boost old naming for libraries], [
	BOOST_OLD_NAMING="enabled"
])

# Checks for programs.
AC_PROG_CXX([g++-3.2 g++-3 g++-3.1 g++-3.0 g++3 g++])
AC_LANG_CPLUSPLUS
AC_EXEEXT
AC_OBJEXT
AC_PROG_CC
AC_PROG_INSTALL

# Checks for libraries.

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h errno.h fcntl.h netdb.h netinet/in.h stdlib.h string.h strings.h sys/socket.h sys/time.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME

# Checks for library functions.
AC_CHECK_FUNCS([gethostbyname inet_ntoa memset select socket strtol])

# check for libxml2
AM_PATH_XML2(2.6.5, , AC_MSG_ERROR([you need libxml2 >= 2.6.5 to compile otserv!]))

# check for lua
#PKG_CHECK_MODULES(LUA50, lualib50 >= 5.0.0, , AC_MSG_ERROR([you need lua and lualib >= 5.0 to compile otserv!]))
#AC_SUBST(LUA50_CFLAGS)
#AC_SUBST(LUA50_LIBS)
AC_CHECK_HEADERS([lua.h],[],[AC_MSG_ERROR("lua headers are missing.")])
AC_CHECK_LIB(lua, main, [LUA_LIBS="-llua"], [
	AC_MSG_ERROR("Linking against lua failed.")])
AC_SUBST(LUA_LIBS)

# check for boost
AC_CHECK_HEADERS([boost/config.hpp boost/bind.hpp],[],[AC_MSG_ERROR("boost headers are missing.")])
if test -z "$BOOST_OLD_NAMING"; then
AC_CHECK_LIB(boost_thread-gcc-mt, main, [BOOST_LIBS="-lboost_thread-gcc-mt -lboost_regex-gcc-mt"], [
	AC_MSG_ERROR("Linking against boost_thread-gcc-mt failed.")])
else
AC_CHECK_LIB(boost_thread, main, [BOOST_LIBS="-lboost_thread -lboost_regex"], [
	AC_MSG_ERROR("Linking against boost_thread failed.")])
fi
AC_SUBST(BOOST_LIBS)
# check for gmp
AC_CHECK_HEADERS([gmp.h],[GMP_LIBS="-lgmp"],[AC_MSG_ERROR("gmp header is missing.")])
AC_SUBST(GMP_LIBS)

# check for mysql if it is enabled
if test -n "$MYSQL_FLAGS"; then 
   AC_CHECK_HEADERS([mysql/mysql.h],[MYSQL_LIBS=-lmysqlclient],[AC_MSG_ERROR("mysql-client missing.")])
   AC_CHECK_LIB(mysqlclient, main,[],[AC_MSG_ERROR("Linking against mysql-client failed.")])
   AC_SUBST(MYSQL_LIBS)
fi

# check for sqlite if it is enabled
if test -n "$SQLITE_FLAGS"; then 
   AC_CHECK_HEADERS([sqlite3.h],[SQLITE_LIBS=-lsqlite3],[AC_MSG_ERROR("sqlite3 missing.")])
   AC_CHECK_LIB(sqlite3, main,[],[AC_MSG_ERROR("Linking against sqlite3 failed.")])
   AC_SUBST(SQLITE_LIBS)
fi

#AC_CHECK_HEADERS([mysql++.h],[MYSQLPP_LIBS=-lmysqlpp],[AC_MSG_ERROR("mysql++ missing.")])
#AC_CHECK_LIB(mysqlpp, mysqlpp)
#AC_SUBST(MYSQLPP_LIBS)

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
